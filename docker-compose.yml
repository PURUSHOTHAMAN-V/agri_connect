version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agriconnect_db
    environment:
      POSTGRES_DB: agriconnect_tn
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Vpcare@24x7
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - agriconnect_network
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: agriconnect_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agriconnect_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agriconnect_backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgres://postgres:Vpcare@24x7@postgres:5432/agriconnect_tn
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-here
      - JWT_EXPIRES_IN=7d
      - REFRESH_TOKEN_SECRET=your-refresh-token-secret
      - REFRESH_TOKEN_EXPIRES_IN=30d
      - CORS_ORIGIN=http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - agriconnect_network
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agriconnect_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - agriconnect_network
    restart: unless-stopped

  # ML Service (Python)
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: agriconnect_ml
    environment:
      - PYTHONPATH=/app
      - MODEL_PATH=/app/models
      - DATABASE_URL=postgres://postgres:Vpcare@24x7@postgres:5432/agriconnect_tn
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    networks:
      - agriconnect_network
    restart: unless-stopped
    volumes:
      - ./ml-service/models:/app/models
      - ./ml-service/data:/app/data

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: agriconnect_nginx
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - agriconnect_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  agriconnect_network:
    driver: bridge

